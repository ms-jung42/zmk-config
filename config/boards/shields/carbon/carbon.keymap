#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define NUM   1
#define BLE   2

&mt {
    tapping-term-ms = <250>;
};

/ { 
combos {
    compatible = "zmk,combos";
        combo_space {
            timeout-ms = <50>;
            key-positions = <61 70>;
            bindings = <&kp SPACE>;
        };
        combo_bt {
            timeout-ms = <50>;
            key-positions = <0 14>;
            bindings = <&tog BLE>;
        };
        combo_Rpara {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp RPAR>;
        };
        combo_hash {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&>;
        };
        combo_Lpara {
            timeout-ms = <50>;
            key-positions = <29 30>;
            bindings = <&kp LPAR>;
        };
        combo_num {
            timeout-ms = <50>;
            key-positions = <62 70>;
            bindings = <&tog NUM>;
        };
    };

behaviors {
    td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP"
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp GRAVE>, <&kp ESC>;
        };
    };    
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <

&kp GRAVE    &kp N1     &kp N2    &kp N3   &kp N4   &kp N5                         &kp N6     &kp N7    &kp N8   &kp N9     &kp N0    &kp MINUS  &kp EQUAL  &kp BACKSPACE
&kp TAB      &kp Q      &kp W     &kp E    &kp R    &kp T                          &kp Y      &kp U     &kp I    &kp O      &kp P     &kp LBKT   &kp RBKT   &kp NUBS
&kp CAPS     &kp A      &kp S     &kp D    &kp F    &kp G                          &kp H      &kp J     &kp K    &kp L      &kp SEMI  &kp SQT    &kp ENTER
&bt LSHFT    &kp LANG2  &kp Z     &kp X    &kp C    &kp V         &kp B         &kp B      &kp N     &kp M    &kp COMMA  &kp DOT   &kp SLASH  &kp UP     &kp RSHFT
&kp LCTRL    &kp LWIN   &kp LALT                    &kp DELETE      &kp RIGHT        &kp BACKSPACE  &kp LANG1         &kp RALT   &kp LEFT  &kp DOWN   &kp RIGHT
                                                    &kp LEFT    &kp LSHFT        &kp ENTER  &kp SPACE
            >;
        };

        NUM_layer {
            bindings = <

&none     &trans     &trans    &trans     &trans   &trans                                 &kp N7     &kp N8    &kp N9   &kp MINUS     &kp PLUS    &none  &none  &kp BACKSPACE
&trans    &trans     &kp UP    &none      &none    &none                                  &kp N4      &kp N5     &kp N6    &kp AST      &kp EQUAL     &kp LBKT   &kp RBKT   &kp NUBS
&none     &kp LEFT   &kp DOWN  &kp RIGHT  &none    &none                                  &N1      &kp N2     &kp N3    &none     &none   &none    &kp ENTER
&trans    &kp LANG2  &none     &none      &none    &none         &none         &kp LPAR      &kp N0     &kp RPAR    &kp COMMA  &kp DOT   &kp SLASH  &kp UP     &kp RSHFT
&trans    &kp LWIN   &kp LALT                      &kp DELETE      &kp RIGHT     &kp BACKSPACE  &kp LANG1          &kp RALT   &kp LEFT  &kp DOWN   &kp RIGHT
                                                   &kp LEFT    &kp LSHFT     &kp ENTER  &kp SPACE
            >;
        };

        BLE_layer {
            bindings = <

&none   &BT_SEL 0    &BT_SEL 1   &BT_SEL 2   &BT_SEL 3   &BT_SEL 4                            &none    &none   &none   &none    &none   &none   &none   &none
&none     &none     &none    &none   &none   &none                         &none     &none    &none   &none   &none    &none   &none   &none
&none    &BT_CLR     &none    &none   &none   &none                         &none     &none    &none   &none   &none   &none   &none
&none    &none   &none    &none   &none   &none               &none    &none     &none    &none   &none   &none   &none   &none    &none
&none   &none    &none                     &none   &none              &none    &none                                      &none   &none   &none   &none
                                                &none   &none        &none    &none

            >;
        };
    };
}; 


